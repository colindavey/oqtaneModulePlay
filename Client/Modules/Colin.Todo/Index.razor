@using Colin.Todo.Services
@using Colin.Todo.Models

@namespace Colin.Todo
@inherits ModuleBase
@inject ITodoService TodoService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer

@if (_Todos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Todo" ResourceKey="Add" />
    <br />
    <br />
    @if (@_Todos.Count != 0)
    {
        <Pager Items="@_Todos">
            <Header>
            <th style="width: 1px;">&nbsp;</th>
            <th style="width: 1px;">&nbsp;</th>
            <th>@Localizer["Name"]</th>
            </Header>
            <Row>
                <td><ActionLink Action="Edit" Parameters="@($"id=" + context.TodoId.ToString())" ResourceKey="Edit" /></td>
                <td><button type="button" class="btn btn-primary" @onclick="@(async () => await Copy(context))">Copy</button></td>
                <td><ActionDialog Header="Delete Todo" Message="@("Are You Sure You Wish To Delete The " + context.Name + " Todo?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" ResourceKey="Delete" /></td>
                <td>@context.Name</td>
            </Row>
        </Pager>
    }
    else
    {
        <p>@Localizer["Message.DisplayNone"]</p>
    }
}

@code {
    public override List<Resource> Resources => new List<Resource>()
{
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Url = ModulePath() + "Module.js" }
    };

    List<Todo> _Todos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _Todos = await TodoService.GetTodosAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Todo {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Copy(Todo Todo)
    //    private async Task Copy()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "Copy before");
        await JSRuntime.InvokeVoidAsync("console.log", Todo);

        try
        {
            Todo NewTodo = new Todo();
            NewTodo.ModuleId = ModuleState.ModuleId;
            NewTodo.Name = Todo.Name;
            NewTodo = await TodoService.AddTodoAsync(NewTodo);
            await logger.LogInformation("Todo Copied {NewTodo}", NewTodo);
            await JSRuntime.InvokeVoidAsync("console.log", "Copy after");
            await JSRuntime.InvokeVoidAsync("console.log", NewTodo);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Copying Todo {Todo} {Error}", Todo, ex.Message);
            //            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
            AddModuleMessage("Error Copying Todo", MessageType.Error);
        }
    }

    private async Task Delete(Todo Todo)
    {
        await JSRuntime.InvokeVoidAsync("console.log", "Deleting");

        try
        {
            await TodoService.DeleteTodoAsync(Todo.TodoId, ModuleState.ModuleId);
            await logger.LogInformation("Todo Deleted {Todo}", Todo);
            _Todos = await TodoService.GetTodosAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Todo {Todo} {Error}", Todo, ex.Message);
            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
        }
    }
}